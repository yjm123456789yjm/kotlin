/** This file is generated by {@link :js:js.test:generateJsExportOnFileTestFilesForTS} task. DO NOT MODIFY MANUALLY */

// CHECK_TYPESCRIPT_DECLARATIONS
// RUN_PLAIN_BOX_FUNCTION
// SKIP_MINIFICATION
// SKIP_NODE_JS
// INFER_MAIN_MODULE
// MODULE: JS_TESTS
// FILE: declarations.kt

@file:JsExport

package foo

// TODO: Test the same for member functions:


fun sum(x: Int, y: Int): Int =
    x + y


fun varargInt(vararg x: Int): Int =
    x.size


fun varargNullableInt(vararg x: Int?): Int =
    x.size


fun varargWithOtherParameters(x: String, vararg y: String, z: String): Int =
    x.length + y.size + z.length


fun varargWithComplexType(vararg x: (Array<IntArray>) -> Array<IntArray>): Int =
    x.size


fun sumNullable(x: Int?, y: Int?): Int =
    (x ?: 0) + (y ?: 0)


fun defaultParameters(a: String, x: Int = 10, y: String = "OK"): String =
    a + x.toString() + y


fun <T> generic1(x: T): T = x


fun <T> generic2(x: T?): Boolean = (x == null)


fun <T: String> genericWithConstraint(x: T): T = x


fun <T> genericWithMultipleConstraints(x: T): T
        where T : Comparable<T>,
              T : TestInterface,
              T : Throwable = x


fun <A, B, C, D, E> generic3(a: A, b: B, c: C, d: D): E? = null


inline fun inlineFun(x: Int, callback: (Int) -> Unit) {
    callback(x)
}

// Properties


const val _const_val: Int = 1


val _val: Int = 1


var _var: Int = 1


val _valCustom: Int
    get() = 1


val _valCustomWithField: Int = 1
    get() = field + 1


var _varCustom: Int
    get() = 1
    set(value) {}


var _varCustomWithField: Int = 1
    get() = field * 10
    set(value) { field = value * 10 }

// Classes


class A


class A1(val x: Int)


class A2(val x: String, var y: Boolean)


class A3 {
    val x: Int = 100
}


class A4 {
    val _valCustom: Int
        get() = 1

    val _valCustomWithField: Int = 1
        get() = field + 1

    var _varCustom: Int
        get() = 1
        set(value) {}

    var _varCustomWithField: Int = 1
        get() = field * 10
        set(value) { field = value * 10 }
}


class A5<T>(val value: T) {
    fun test(): T = value
}


object O0


object O {
    val x = 10
    @JsName("foo")  // TODO: Should work without JsName
    fun foo() = 20
}


fun takesO(o: O): Int =
    O.x + O.foo()


class KT_37829 {
    companion object {
        val x = 10
    }
}

// See KT-47376, KT-39364

sealed class TestSealed(val name: String) {
    class AA : TestSealed("AA") {
        fun bar(): String = "bar"
    }
    class BB : TestSealed("BB") {
        fun baz(): String = "baz"
    }
}

// See KT-39364

abstract class TestAbstract(val name: String) {
    class AA : TestAbstract("AA") {
        fun bar(): String = "bar"
    }
    class BB : TestAbstract("BB") {
        fun baz(): String = "baz"
    }
}


data class TestDataClass(val name: String) {
    class Nested {
        val prop: String = "hello"
    }
}


enum class TestEnumClass(val constructorParameter: String) {
    A("aConstructorParameter"),
    B("bConstructorParameter");

    val foo = ordinal

    fun bar(value: String) = value

    fun bay() = name

    class Nested {
        val prop: String = "hello2"
    }
}



interface TestInterface {
    val value: String
    fun getOwnerName(): String
}


interface AnotherExportedInterface


open class TestInterfaceImpl(override val value: String) : TestInterface {
    override fun getOwnerName() = "TestInterfaceImpl"
}


class ChildTestInterfaceImpl(): TestInterfaceImpl("Test"), AnotherExportedInterface


fun processInterface(test: TestInterface): String {
    return "Owner ${test.getOwnerName()} has value '${test.value}'"
}


class OuterClass {
    enum class NestedEnum {
        A,
        B
    }
}


open class KT38262 {
    fun then(): Int = 42
    fun catch(): Int = 24
}


@JsName("JsNameTest")
class __JsNameTest private constructor() {
    @JsName("value")
    val __value = 4

    @JsName("runTest")
    fun __runTest(): String {
        return "JsNameTest"
    }

    companion object {
        @JsName("create")
        fun __create(): __JsNameTest {
           return __JsNameTest()
        }

        @JsName("createChild")
        fun __createChild(value: Int): __NestJsNameTest {
           return  __NestJsNameTest(value)
        }
    }

    @JsName("NestedJsName")
    class __NestJsNameTest(@JsName("value") val __value: Int)
}


data class KT39423(
    val a: String,
    val b: Int? = null
)


object Parent {
    object Nested1 {
        val value: String = "Nested1"
        class Nested2 {
            companion object {
                class Nested3
            }
        }
    }
}


fun getParent(): Parent {
    return Parent
}


fun createNested1(): Parent.Nested1 {
    return Parent.Nested1
}


fun createNested2(): Parent.Nested1.Nested2 {
    return Parent.Nested1.Nested2()
}


fun createNested3(): Parent.Nested1.Nested2.Companion.Nested3 {
    return Parent.Nested1.Nested2.Companion.Nested3()
}
